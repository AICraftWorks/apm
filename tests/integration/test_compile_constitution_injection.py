from __future__ import annotations

import subprocess
import sys
from pathlib import Path

from ..utils.constitution_fixtures import temp_project_with_constitution, DEFAULT_CONSTITUTION

CLI = [sys.executable, "-m", "apm_cli.cli", "compile", "--single-agents"]


def run_cli(cwd: Path, *args: str) -> subprocess.CompletedProcess:
    return subprocess.run(CLI + list(args), cwd=str(cwd), capture_output=True, text=True)


def read_agents(cwd: Path) -> str:
    return (cwd / "AGENTS.md").read_text(encoding="utf-8")


def test_injects_block_when_constitution_present():
    with temp_project_with_constitution(constitution_text=DEFAULT_CONSTITUTION) as proj:
        result = run_cli(proj)
        assert result.returncode == 0, result.stderr
        content = read_agents(proj)
        lines = content.splitlines()
        # Header expectations
        assert lines[0] == "# AGENTS.md"
        assert lines[1].startswith("<!-- Generated by APM CLI")
        # Build ID placeholder replaced
        assert lines[2].startswith("<!-- Build ID: ")
        # Constitution block must start AFTER header block (which ends at first blank line)
        # Find first blank line after header
        try:
            blank_index = lines.index("")
        except ValueError:
            raise AssertionError("Header separator blank line missing")
        # Constitution begin should appear after that blank line
        begin_index = None
        for i, l in enumerate(lines):
            if l.strip() == "<!-- SPEC-KIT CONSTITUTION: BEGIN -->":
                begin_index = i
                break
        assert begin_index is not None, "Constitution block begin marker missing"
        assert begin_index > blank_index, "Constitution block must follow header section"
        # End marker present
        assert "<!-- SPEC-KIT CONSTITUTION: END -->" in content
        # Full raw content present
        for line in DEFAULT_CONSTITUTION.strip().splitlines():
            assert line in content
        # Hash line directly after begin marker
        hash_line = lines[begin_index + 1]
        assert hash_line.startswith("hash:"), "Hash line missing after constitution begin"

def test_header_then_block_ordering_idempotent():
    """Ensure ordering (header -> block -> body) remains stable across runs."""
    with temp_project_with_constitution(constitution_text=DEFAULT_CONSTITUTION) as proj:
        r1 = run_cli(proj)
        assert r1.returncode == 0
        first = read_agents(proj).splitlines()
        r2 = run_cli(proj)
        assert r2.returncode == 0
        second = read_agents(proj).splitlines()
        assert first == second
        # Structural assertions
        assert first[0] == "# AGENTS.md"
        begin_positions = [i for i,l in enumerate(first) if l.strip()=="<!-- SPEC-KIT CONSTITUTION: BEGIN -->"]
        assert begin_positions, "Missing constitution block"
        # Ensure block is not before header lines
        assert begin_positions[0] > 2, "Constitution block unexpectedly before header metadata"


def test_idempotent_when_no_changes():
    with temp_project_with_constitution(constitution_text=DEFAULT_CONSTITUTION) as proj:
        r1 = run_cli(proj)
        assert r1.returncode == 0
        first = read_agents(proj)
        r2 = run_cli(proj)
        assert r2.returncode == 0
        second = read_agents(proj)
        assert first == second


def test_updates_when_constitution_changes():
    with temp_project_with_constitution(constitution_text=DEFAULT_CONSTITUTION) as proj:
        run_cli(proj)
        original = read_agents(proj)
        # Modify constitution
        (proj / ".specify" / "memory" / "constitution.md").write_text(DEFAULT_CONSTITUTION + "\nNew Principle X\n", encoding="utf-8")
        run_cli(proj)
        updated = read_agents(proj)
        assert original != updated
        assert "New Principle X" in updated


def test_skips_with_flag_no_constitution():
    with temp_project_with_constitution(constitution_text=DEFAULT_CONSTITUTION) as proj:
        # First compile to create file with block
        run_cli(proj)
        first = read_agents(proj)
        assert "<!-- SPEC-KIT CONSTITUTION: BEGIN -->" in first
        
        # Re-run with skip flag
        run_cli(proj, "--no-constitution")
        second = read_agents(proj)
        
        # Constitution block should be removed when --no-constitution flag is used
        assert "<!-- SPEC-KIT CONSTITUTION: BEGIN -->" not in second
        # But basic structure should remain
        assert "# AGENTS.md" in second


def test_creates_agents_md_if_missing():
    with temp_project_with_constitution(constitution_text=DEFAULT_CONSTITUTION) as proj:
        assert not (proj / "AGENTS.md").exists()
        run_cli(proj)
        assert (proj / "AGENTS.md").exists()


def test_no_failure_if_constitution_absent():
    with temp_project_with_constitution(constitution_text=None) as proj:
        result = run_cli(proj)
        # When no constitution and no APM content exist, CLI should exit with error
        assert result.returncode == 1
        # Should not create AGENTS.md
        assert not (proj / "AGENTS.md").exists()
        # Should indicate nothing to compile
        assert "No APM content found to compile" in result.stdout
